0000              1   
0000              2   
0000              3   
0000              4   
0000              5   
0000              6   ; Main file. FSM implementing the following sequence:
0000              7   ;       State 0: Power = 0% (default state)
0000              8   ;               if start = NO, self loop; if start = YES, next state
0000              9   ;       State 1: Power = 100%; Sec = 0
0000             10   ;               if temp <= 150, self loop; temp > 150, next
0000             11   ;       State 2: Power = 20%
0000             12   ;               if sec <= 60s, self loop; sec>60s, next
0000             13   ;       State 3: Power = 100%; Sec = 0
0000             14   ;               if temp <= 220, self loop; temp>220, next
0000             15   ;       State 4: Power = 20%
0000             16   ;               if sec <= 45s, self loop; sec >45, next
0000             17   ;       State 5: Power = 0%
0000             18   ;               if temp >=60, self loop; temp <60, next
0000             19   ;       return to state 0
0000             20   
                 22   $LIST
0000             24   
0000             25   ;  N76E003 pinout:
0000             26   ;                               -------
0000             27   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             28   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             29   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             30   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             31   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             32   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             33   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             34   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             35   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             36   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             37   ;                               -------
0000             38   
0000             39   
0000             40   
0000             41   ;-------------------------------------------------------------------------------------------------------------------------------------
0000             42   
0000             43   ;                                                              STYLE GUIDE
0000             44   
0000             45   ; End flag names with _FLAG
0000             46   ; Use all upper case for constants (anything defined in equ or pin definitions), as it makes it easier to read quickly
0000             47   ; Before any jump or logic block comment purpose and try to comment throughout - code should be self explanatory, comment "why" it was implemented this way
0000             48   ; Before any block of code also comment who wrote it 
0000             49   ; Aim for variable names with 8-20 characters
0000             50   
0000             51   ; --------------------------------------------------------------------------------------------------------------------------
0000             52   
0000             53   
0000             54   ; Timer constants
0000             55   CLK                   EQU 16600000 ; Microcontroller system frequency in Hz
0000             56   BAUD                  EQU 115200   ; Baud rate of UART in bps 
0000             57   TIMER1_RELOAD         EQU (0x100-(CLK/(16*BAUD))) ; ISR that's used for serial???
0000             58   TIMER2_RELOAD         EQU (65536-(CLK/1000))    ; For ISR that runs every 1ms
0000             59   TIMER0_RELOAD         EQU (0x10000-(CLK/4096))    ; For 2kHz square wave
0000             60   
0000             61   ; Pin definitions + Hardware Wiring
0000             62   START_PIN             EQU P1.5 ; change to correct pin later
0000             63   ; STOP_PIN              EQU P3.0 ; change to correct pin later
0000             64   INC_TIME_PIN          EQU P3.0 ; change to correct pin later
0000             65   INC_TEMP_PIN          EQU P0.4 ; change to correct pin later
0000             66   CHANGE_MENU_PIN       EQU P1.6 ; change to correct pin later
0000             67   ; SSR_OUTPUT_PIN        EQU P3.0 ; change to correct pin later
0000             68   
0000             69   
0000             70   MENU_STATE_SOAK       EQU 0
0000             71   MENU_STATE_REFLOW     EQU 1
0000             72   MENU_STATE_TEST       EQU 2
0000             73   OVEN_STATE_PREHEAT    EQU 0
0000             74   OVEN_STATE_SOAK       EQU 1
0000             75   OVEN_STATE_REFLOW     EQU 2
0000             76   
0000             77   ; define vectors
0000             78   ORG 0x0000 ; Reset vector
0000 02077C      79           ljmp main_program
0003             80   ORG 0x0003 ; External interrupt 0 vector
0003 32          81           reti
000B             82   ORG 0x000B ; Timer/Counter 0 overflow interrupt vector
000B 020407      83            ljmp Timer0_ISR
0013             84   ORG 0x0013 ; External interrupt 1 vector
0013 32          85            reti
001B             86   ORG 0x001B ; Timer/Counter 1 overflow interrupt vector 
001B 32          87            reti
0023             88   ORG 0x0023 ; Serial port receive/transmit interrupt vector 
0023 32          89            reti
002B             90   ORG 0x002B ; Timer/Counter 2 overflow interrupt vector
002B 020408      91            ljmp Timer2_ISR
002E             92   
002E             93   
002E             94   ; register definitions previously needed by 'math32.inc' - currently commented out for future changes
0030             95   DSEG at 30H
0030             96   x               : ds 4
0034             97   y               : ds 4
0038             98   bcd             : ds 5
003D             99   bcdf            : ds 5
0042            100   VLED_ADC        : ds 2
0044            101   
0044            102   OVEN_STATE      : ds 1 ; stores oven FSM state
0045            103   MENU_STATE      : ds 1 ; stores menu FSM state
0046            104   temp_soak       : ds 2 
0048            105   time_soak       : ds 1
0049            106   temp_refl       : ds 2
004B            107   time_refl       : ds 1
004C            108   pwm             : ds 1 ; controls output power to SSR
004D            109   
0030            110   dseg at 0x30
0030            111   Count1ms        : ds 2 ; determines the number of 1ms increments that have passed 
0032            112   seconds_elapsed  : DS 1
0033            113   
0033            114   
002E            115   CSEG ;starts the absolute segment from that address
002E            116   ; These 'EQU' must match the hardware wiring
002E            117   LCD_RS          EQU P1.3
002E            118   ;LCD_RW         EQU PX.X ; Not used in this code, connect the pin to GND
002E            119   LCD_E           EQU P1.4
002E            120   LCD_D4          EQU P0.0
002E            121   LCD_D5          EQU P0.1
002E            122   LCD_D6          EQU P0.2
002E            123   LCD_D7          EQU P0.3
002E            124   
                126   	$LIST
00E2            128   
00E2            129   ; Flags that are used to control events 
0000            130   BSEG 
0000            131   mf              : dbit 1
0001            132   IN_MENU_FLAG    : dbit 1
0002            133   IN_OVEN_FLAG    : dbit 1
0003            134   
                547   $LIST
                136   $LIST
0352            138   
0352            139   ; Messages to display on LCD when in Menu FSM
0352 5265666C   140   LCD_defaultTop  : db 'Reflow Oven: ', 0
     6F77204F
     76656E3A
     2000
0360 53746172   141   LCD_defaultBot  : db 'Start/Configure?', 0
     742F436F
     6E666967
     7572653F
     00
0371 536F616B   142   LCD_soakTime    : db 'Soak Time: ', 0
     2054696D
     653A2000
037D 536F616B   143   LCD_soakTemp    : db 'Soak Temp: ', 0
     2054656D
     703A2000
0389 5265666C   144   LCD_reflowTime  : db 'Refl Time: ', 0
     2054696D
     653A2000
0395 5265666C   145   LCD_reflowTemp  : db 'Refl Temp: ', 0
     2054656D
     703A2000
03A1 54455354   146   LCD_TEST        : db 'TEST MESSAGE ', 0
     204D4553
     53414745
     2000
03AF 20202020   147   LCD_clearLine   : db '                ', 0 ; put at end to clear line
     20202020
     20202020
     20202020
     00
03C0            148   
03C0 50726568   149   preheatMessage  : db 'Preheat', 0
     65617400
03C8 536F616B   150   soakMessage     : db 'Soak', 0
     00
03CD 5265666C   151   reflowMessage   : db 'Reflow', 0
     6F7700
03D4            152   
03D4            153   ; Messages to display on LCD when in Oven Controller FSM
03D4            154   
03D4            155   ;---------------------------------;
03D4            156   ; Routine to initialize the ISR   ;
03D4            157   ; for timer 0                     ;
03D4            158   ;---------------------------------;
03D4            159   Timer0_Init:
03D4 438E08     160            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1 ; performs bit masking on CKON - Clock Control ; T0M = 1, timer 0 uses the system clock directly
03D7 E589       161            mov a, TMOD
03D9 54F0       162            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
03DB 4401       163            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer (M1M0 = 01 -> Mode 1: 16-bit Timer/Counter)
03DD F589       164            mov TMOD, a
03DF 758CF0     165            mov TH0, #high(TIMER0_RELOAD) ; 8051 works with 8 bits so the oepration T0 = TIMER0_RELOAD  (16 bits) is done by setting high byte then low byte (8x2)
03E2 758A2C     166            mov TL0, #low (TIMER0_RELOAD)
03E5            167            ; Enable the timer and interrupts
03E5 D2A9       168       setb ET0  ; Enable timer 0 interrupt
03E7 D28C       169       setb TR0  ; Start timer 0
03E9 22         170            ret
03EA            171   
03EA            172   ;---------------------------------;
03EA            173   ; Routine to initialize the ISR   ;
03EA            174   ; for timer 2                     ;
03EA            175   ;---------------------------------;
03EA            176   Timer2_Init:
03EA 75C800     177            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
03ED 75CDBF     178            mov TH2, #high(TIMER2_RELOAD)
03F0 75CC28     179            mov TL2, #low(TIMER2_RELOAD)
03F3            180            ; Set the reload value
03F3 43C980     181            orl T2MOD, #0x80 ; Enable timer 2 autoreload
03F6 75CBBF     182            mov RCMP2H, #high(TIMER2_RELOAD)
03F9 75CA28     183            mov RCMP2L, #low(TIMER2_RELOAD)
03FC            184            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
03FC E4         185            clr a
03FD F530       186            mov Count1ms+0, a
03FF F531       187            mov Count1ms+1, a
0401            188            ; Enable the timer and interrupts
0401 439B80     189            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
0404 D2CA       190           setb TR2  ; Enable timer 2
0406 22         191            ret
0407            192   
0407            193   Timer0_ISR:
0407 32         194   reti
0408            195   
0408            196   ;---------------------------------;
0408            197   ; ISR for timer 2                 ;
0408            198   ;---------------------------------;
0408            199   Timer2_ISR:
0408 C2CF       200           clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR.  It is bit addressable.
040A B284       201           cpl P0.4 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
040C            202   
040C            203           ; The two registers used in the ISR must be saved in the stack
040C C0E0       204           push acc
040E C0D0       205           push psw
0410            206   
0410            207           ; Increment the 16-bit one mili second counter
0410 0530       208           inc Count1ms+0    ; Increment the low 8-bits first
0412 E530       209           mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0414 7002       210           jnz Inc_done
0416 0531       211           inc Count1ms+1
0418            212           
0418            213           Inc_done:
0418            214           ; Check if one second has passed
0418 E530       215            mov     a, Count1ms+0
041A B4E810     216            cjne    a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
041D E531       217            mov     a, Count1ms+1
041F B4030B     218            cjne    a, #high(1000), Timer2_ISR_done         
0422            219   
0422            220           ; ; ---  1s has passed ----
0422            221           ; mov a, OVEN_STATE
0422            222           ; add A, #1
0422            223           ; mov OVEN_STATE, a
0422            224   
0422 E532       225           mov a, seconds_elapsed
0424 2401       226           add A, #1
0426 F532       227           mov seconds_elapsed, a
0428            228   
0428            229           ; reset seconds ms counter
0428 E4         230           clr a
0429 F530       231           mov Count1ms+0, a
042B F531       232           mov Count1ms+1, a
042D            233           
042D            234           Timer2_ISR_done:
042D D0D0       235           pop psw
042F D0E0       236            pop acc
0431 32         237           reti
0432            238   
0432            239   Initilize_All:
0432            240           ; Configure pins to be bi-directional
0432 75AC00     241           mov      P3M1,#0x00
0435 75AD00     242            mov     P3M2,#0x00
0438 75B300     243            mov     P1M1,#0x00
043B 75B400     244            mov     P1M2,#0x00
043E 75B100     245            mov     P0M1,#0x00
0441 75B200     246            mov     P0M2,#0x00
0444            247   
0444 D296       248           setb    CHANGE_MENU_PIN
0446 D295       249           setb    START_PIN
0448            250   
0448 D2AF       251           setb    EA   ; Enable Global interrupts
044A            252   
044A            253   
044A            254           ; Since the reset button bounces, we need to wait a bit before
044A            255           ; sending messages, otherwise we risk displaying gibberish!
044A C002       256            push AR2
044C 7A32       256            mov R2, #50
044E 120038     256            lcall ?Wait_Milli_Seconds
0451 D002       256            pop AR2
0453            257   
0453            258           ; Now we can proceed with the configuration of the serial port
0453 438E10     259           orl      CKCON, #0x10 ; CLK is the input for timer 1
0456 438780     260           orl      PCON, #0x80  ; Bit SMOD=1, double baud rate
0459 759852     261           mov      SCON, #0x52
045C 53C4DF     262           anl      T3CON, #0b11011111
045F 53890F     263           anl      TMOD, #0x0F ; Clear the configuration bits for timer 1
0462 438920     264           orl      TMOD, #0x20 ; Timer 1 Mode 2
0465 758DF7     265           mov      TH1, #TIMER1_RELOAD
0468 D28E       266           setb    TR1
046A            267                           
046A            268           ; Using timer 0 for delay functions.  Initialize here:
046A C28C       269            clr     TR0         ; Stop timer 0
046C 438E08     270            orl     CKCON,#0x08 ; CLK is the input for timer 0
046F 5389F0     271            anl     TMOD,#0xF0  ; Clear the configuration bits for timer 0
0472 438901     272            orl     TMOD,#0x01  ; Timer 0 in Mode 1: 16-bit timer
0475            273            
0475            274            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
0475 43B382     275            orl     P1M1, #0b10000010
0478 53B47D     276            anl     P1M2, #0b01111101
047B            277            
047B            278            ; Initialize and start the ADC:
047B 53E8F0     279            anl     ADCCON0, #0xF0
047E 43E807     280            orl     ADCCON0, #0x07 ; Select channel 7
0481            281            
0481            282           ; AINDIDS select if some pins are analog inputs or digital I/O:
0481 75F600     283            mov     AINDIDS, #0x00 ; Disable all analog inputs
0484 43F681     284            orl     AINDIDS, #0b10000001 ; Activate AIN0 and AIN7 analog inputs
0487 43E101     285            orl     ADCCON1, #0x01 ; Enable ADC
048A            286   
048A            287           ; Menu Configuration
048A C201       288           clr     IN_MENU_FLAG
048C C202       289           clr     IN_OVEN_FLAG
048E 7405       290           mov     a, #5
0490 F545       291           mov     MENU_STATE, a ; set menu state to 0 
0492            292   
0492            293           ; mov     temp_soak, #0x250
0492 754650     294           mov     temp_soak+0, #low (0x250)
0495 754702     295           mov     temp_soak+1, #high(0x250)
0498 754805     296           mov     time_soak, #0x5
049B 754990     297           mov     temp_refl+0, #low (0x90)
049E 754A00     298           mov     temp_refl+1, #high(0x90)
04A1 754B01     299           mov     time_refl, #0x1
04A4            300   
04A4            301           ; incrementing BCD values greater than 0x99: 
04A4            302           ; mov a, temp_soak+0
04A4            303           ; add a, #5
04A4            304           ; mov temp_soak+0, a
04A4            305           ; jnz tempSoakIncDone
04A4            306           ; mov a, temp_soak+1
04A4            307           ; add a, #5
04A4            308           ; mov temp_soak+1, a
04A4            309           ; tempSoakIncDone:
04A4            310   
04A4            311           ; Oven configuration
04A4 754400     312           mov OVEN_STATE, #OVEN_STATE_PREHEAT
04A7 753200     313           mov seconds_elapsed, #0
04AA            314           
04AA            315           ; note that above is pasted from lab 3 - AL, need to add setup code from lab 2
04AA 22         316           ret
04AB            317           
04AB            318   ;Button nested logic -> we should be constantly checking in the main loop for a stop (i.e the stop should be instantaneous)
04AB            319           ;->Buttons should allow for adjustment of soak temp, soak time, reflow temp, reflow time (Ui should be designed to make all these visible and clear)
04AB            320           ;->Start button should either be used only for start or used for start/pause (different from a stop
04AB            321           ;Try to use button logic given in lab 2 to stay consistent
04AB            322           ; Menu Logic (will keep UI clean)
04AB            323           ; Button to switch states - Changes a state variable (4 states -> 2 bits) (or two flags)
04AB            324           ; Two buttons to go up or down a value
04AB            325           ; One button to stop <---- safety feature make this button only STOP
04AB            326           
04AB            327           ; ;pseudo code lol
04AB            328           ; jb [button], [branch]
04AB            329           ; Wait_Milli_Seconds(#50)
04AB            330           ; jb [button], [branch]
04AB            331           ; jnb [button], $
04AB            332           ; ljmp [display??]
04AB            333   
04AB            334   ; Push button macro - It does not work :(
                335   Inc_Menu_Variable MAC
                336           jb %0, %2
                337           Wait_Milli_Seconds(#50) ; de-bounce
                338           jb %0, %2
                339           jnb %0, $
                340           ; successful press registered
                341           inc %1 ; increment param #1
                342   ENDMAC
04AB            343   
04AB            344   ; ; 3 values : current time elapsed in seconds, 
04AB            345   ; FSM_transition_check MAC
04AB            346   ;         jb %0, %2
04AB            347   ;         Wait_Milli_Seconds(#50) ; de-bounce
04AB            348   ;         jb %0, %2
04AB            349   ;         jnb %0, $
04AB            350   ;         ; successful press registered
04AB            351   ;         inc %1 ; increment param #1
04AB            352   ; ENDMAC
04AB            353   
04AB            354   STOP_PROCESS:
04AB            355   ; Turn everything off
04AB 020785     356           ljmp PROGRAM_ENTRY
04AE            357   
04AE            358   ; Precondition: Has temperature stored in x
04AE            359   OVEN_FSM:
04AE            360           ; check stop button press
04AE            361           ; jb STOP_PIN, enterOvenStateCheck
04AE            362            ; Wait_Milli_Seconds(#50)             ; debounce delay
04AE            363            ; jb STOP_PIN, enterOvenStateCheck  ; 
04AE            364            ; jnb STOP_PIN, $        ; wait for release
04AE            365           ; lcall STOP_PROCESS ; 
04AE            366   
04AE            367           ; check oven state if stop button is not pressed
04AE            368           enterOvenStateCheck:
04AE E544       369           mov a, OVEN_STATE
04B0            370   
04B0            371           ; MOV x+0, #low(0x260)
04B0            372           ; MOV x+1, #high(0x260)
04B0            373           ; MOV x+2, #0
04B0            374           ; MOV x+3, #0
04B0            375   
04B0            376           ovenFSM_preheat:
04B0 B40075     377           cjne a, #OVEN_STATE_PREHEAT, ovenFSM_soak
04B3 C0E0       378            push acc
04B5 7401       378            mov a, #1
04B7 14         378            dec a
04B8 1200C7     378            lcall ?Set_Cursor_1 ; Select column and row
04BB D0E0       378            pop acc
04BD C083       379            push dph
04BF C082       379            push dpl
04C1 C0E0       379            push acc
04C3 9003C0     379            mov dptr, #preheatMessage
04C6 1200BA     379            lcall ?Send_Constant_String
04C9 D0E0       379            pop acc
04CB D082       379            pop dpl
04CD D083       379            pop dph
04CF C083       380            push dph
04D1 C082       380            push dpl
04D3 C0E0       380            push acc
04D5 9003AF     380            mov dptr, #LCD_clearLine
04D8 1200BA     380            lcall ?Send_Constant_String
04DB D0E0       380            pop acc
04DD D082       380            pop dpl
04DF D083       380            pop dph
04E1 C0E0       381            push acc
04E3 7401       381            mov a, #1
04E5 14         381            dec a
04E6 1200C5     381            lcall ?Set_Cursor_2 ; Select column and row
04E9 D0E0       381            pop acc
04EB C083       382            push dph
04ED C082       382            push dpl
04EF C0E0       382            push acc
04F1 9003AF     382            mov dptr, #LCD_clearLine
04F4 1200BA     382            lcall ?Send_Constant_String
04F7 D0E0       382            pop acc
04F9 D082       382            pop dpl
04FB D083       382            pop dph
04FD C0E0       383            push acc
04FF 7401       383            mov a, #1
0501 14         383            dec a
0502 1200C5     383            lcall ?Set_Cursor_2 ; Select column and row
0505 D0E0       383            pop acc
0507 C000       384            push ar0
0509 A832       384            mov r0, seconds_elapsed
050B 1200CC     384            lcall ?Display_BCD
050E D000       384            pop ar0
0510            385   
0510            386           ; check if temp >= soak temp
0510 753446     387            mov y+0, #low (temp_soak % 0x10000) 
0513 753500     387            mov y+1, #high(temp_soak % 0x10000) 
0516 753600     387            mov y+2, #low (temp_soak / 0x10000) 
0519 753700     387            mov y+3, #high(temp_soak / 0x10000) 
051C 120248     388           lcall x_gteq_y
051F 300003     389           jnb mf, noChange_preheatState
0522 754401     390           mov OVEN_STATE, #OVEN_STATE_SOAK
0525            391           noChange_preheatState:
0525 020602     392           ljmp oven_FSM_done
0528            393   
0528            394           ovenFSM_soak:
0528 B4016B     395           cjne a, #OVEN_STATE_SOAK, ovenFSM_reflow
052B C0E0       396            push acc
052D 7401       396            mov a, #1
052F 14         396            dec a
0530 1200C7     396            lcall ?Set_Cursor_1 ; Select column and row
0533 D0E0       396            pop acc
0535 C083       397            push dph
0537 C082       397            push dpl
0539 C0E0       397            push acc
053B 9003C8     397            mov dptr, #soakMessage
053E 1200BA     397            lcall ?Send_Constant_String
0541 D0E0       397            pop acc
0543 D082       397            pop dpl
0545 D083       397            pop dph
0547 C083       398            push dph
0549 C082       398            push dpl
054B C0E0       398            push acc
054D 9003AF     398            mov dptr, #LCD_clearLine
0550 1200BA     398            lcall ?Send_Constant_String
0553 D0E0       398            pop acc
0555 D082       398            pop dpl
0557 D083       398            pop dph
0559 C0E0       399            push acc
055B 7401       399            mov a, #1
055D 14         399            dec a
055E 1200C5     399            lcall ?Set_Cursor_2 ; Select column and row
0561 D0E0       399            pop acc
0563 C083       400            push dph
0565 C082       400            push dpl
0567 C0E0       400            push acc
0569 9003AF     400            mov dptr, #LCD_clearLine
056C 1200BA     400            lcall ?Send_Constant_String
056F D0E0       400            pop acc
0571 D082       400            pop dpl
0573 D083       400            pop dph
0575 C0E0       401            push acc
0577 7401       401            mov a, #1
0579 14         401            dec a
057A 1200C5     401            lcall ?Set_Cursor_2 ; Select column and row
057D D0E0       401            pop acc
057F C000       402            push ar0
0581 A832       402            mov r0, seconds_elapsed
0583 1200CC     402            lcall ?Display_BCD
0586 D000       402            pop ar0
0588            403   
0588            404           ; check if seconds elapsed > soak time
0588 E532       405           mov a, seconds_elapsed
058A B54806     406           cjne a, time_soak, noChange_soakState
058D 754402     407           mov OVEN_STATE, #OVEN_STATE_REFLOW
0590 753200     408           mov seconds_elapsed, #0 ; reset
0593            409           noChange_soakState:
0593 020602     410           ljmp oven_FSM_done
0596            411   
0596            412           ovenFSM_reflow:
0596 B40260     413           cjne a, #OVEN_STATE_REFLOW, ovenFSM_exit
0599 C0E0       414            push acc
059B 7401       414            mov a, #1
059D 14         414            dec a
059E 1200C7     414            lcall ?Set_Cursor_1 ; Select column and row
05A1 D0E0       414            pop acc
05A3 C083       415            push dph
05A5 C082       415            push dpl
05A7 C0E0       415            push acc
05A9 9003CD     415            mov dptr, #reflowMessage
05AC 1200BA     415            lcall ?Send_Constant_String
05AF D0E0       415            pop acc
05B1 D082       415            pop dpl
05B3 D083       415            pop dph
05B5 C083       416            push dph
05B7 C082       416            push dpl
05B9 C0E0       416            push acc
05BB 9003AF     416            mov dptr, #LCD_clearLine
05BE 1200BA     416            lcall ?Send_Constant_String
05C1 D0E0       416            pop acc
05C3 D082       416            pop dpl
05C5 D083       416            pop dph
05C7 C0E0       417            push acc
05C9 7401       417            mov a, #1
05CB 14         417            dec a
05CC 1200C5     417            lcall ?Set_Cursor_2 ; Select column and row
05CF D0E0       417            pop acc
05D1 C083       418            push dph
05D3 C082       418            push dpl
05D5 C0E0       418            push acc
05D7 9003AF     418            mov dptr, #LCD_clearLine
05DA 1200BA     418            lcall ?Send_Constant_String
05DD D0E0       418            pop acc
05DF D082       418            pop dpl
05E1 D083       418            pop dph
05E3 C0E0       419            push acc
05E5 7401       419            mov a, #1
05E7 14         419            dec a
05E8 1200C5     419            lcall ?Set_Cursor_2 ; Select column and row
05EB D0E0       419            pop acc
05ED C000       420            push ar0
05EF A832       420            mov r0, seconds_elapsed
05F1 1200CC     420            lcall ?Display_BCD
05F4 D000       420            pop ar0
05F6 020602     421           ljmp oven_FSM_done
05F9            422   
05F9            423           ovenFSM_exit:
05F9 754400     424           mov OVEN_STATE, #OVEN_STATE_PREHEAT
05FC 020602     425           ljmp oven_FSM_done
05FF 1204AB     426           lcall STOP_PROCESS ; Exit oven FSM, turn power off, return to program entry
0602            427           
0602            428           oven_FSM_done:
0602 0204AE     429           ljmp OVEN_FSM ; return to start
0605 22         430           ret
0606            431   
0606            432   MENU_FSM:        
0606 209614     433            jb CHANGE_MENU_PIN, checkTimeInc
0609 C002       434            push AR2
060B 7A32       434            mov R2, #50
060D 120038     434            lcall ?Wait_Milli_Seconds
0610 D002       434            pop AR2               ; debounce delay
0612 209608     435            jb CHANGE_MENU_PIN, checkTimeInc  ; 
0615 3096FD     436            jnb CHANGE_MENU_PIN, $        ; wait for release
0618 E545       437           mov a, MENU_STATE 
061A 04         438           inc a
061B F545       439           mov MENU_STATE, a 
061D            440   
061D            441           ; increment is checked with a seperate cascade that's outside the FSM
061D            442           ; I wanted to keep FSM state outputs seperate from push button checks - George
061D            443           checkTimeInc:
061D 20B022     444            jb INC_TIME_PIN, checkTempInc
0620 C002       445            push AR2
0622 7A32       445            mov R2, #50
0624 120038     445            lcall ?Wait_Milli_Seconds
0627 D002       445            pop AR2               
0629 20B016     446            jb INC_TIME_PIN, checkTempInc  ; 
062C 30B0FD     447            jnb INC_TIME_PIN, $ 
062F B40009     448           cjne a, #MENU_STATE_SOAK, incTimeReflow
0632 E548       449                   mov a, time_soak
0634 2405       450                   add A, #5
0636 D4         451                   DA A
0637 F548       452                   mov time_soak, a       
0639 8007       453                   sjmp checkTempInc       
063B            454           incTimeReflow:
063B E54B       455                   mov a, time_refl
063D 2405       456                   add A, #5
063F D4         457                   DA A
0640 F54B       458                   mov time_refl, a
0642            459           
0642            460           checkTempInc:
0642 208434     461            jb INC_TEMP_PIN, enterMenuStateCheck
0645 C002       462            push AR2
0647 7A32       462            mov R2, #50
0649 120038     462            lcall ?Wait_Milli_Seconds
064C D002       462            pop AR2               
064E 208428     463            jb INC_TEMP_PIN, enterMenuStateCheck    
0651 3084FD     464            jnb INC_TEMP_PIN, $        
0654 B40012     465           cjne a, #MENU_STATE_SOAK, incTempReflow  
0657 E546       466                   mov a, temp_soak+0
0659 2405       467                   add a, #0x5
065B D4         468                   DA a
065C F546       469                   mov temp_soak+0, a
065E 7007       470                   jnz tempSoakIncDone
0660 E547       471                   mov a, temp_soak+1
0662 2405       472                   add a, #0x5
0664 D4         473                   DA a
0665 F547       474                   mov temp_soak+1, a
0667            475                   tempSoakIncDone:
0667 8010       476                   sjmp enterMenuStateCheck       
0669            477           incTempReflow:
0669 E549       478                   mov a, temp_refl+0
066B 2405       479                   add a, #0x5
066D D4         480                   DA a
066E F549       481                   mov temp_refl+0, a
0670 7007       482                   jnz tempReflIncDone
0672 E54A       483                   mov a, temp_refl+1
0674 2405       484                   add a, #0x5
0676 D4         485                   DA a
0677 F54A       486                   mov temp_refl+1, a
0679            487                   tempReflIncDone:
0679            488   
0679            489           enterMenuStateCheck:
0679 E545       490           mov a, MENU_STATE
067B            491   
067B            492           menuFSM_configSoak:
067B B4007A     493           cjne a, #MENU_STATE_SOAK, menuFSM_configReflow
067E            494           ; State - Config Soak
067E            495           ; Inc_Menu_Variable (INC_TEMP_PIN, temp_soak, noSoakTempInc)
067E            496           ; noSoakTempInc:
067E            497           ; Inc_Menu_Variable (INC_TIME_PIN, time_soak, noSoaktimeInc)
067E            498           ; noSoaktimeInc:
067E            499           ; display Soak Menu Options
067E C0E0       500            push acc
0680 7401       500            mov a, #1
0682 14         500            dec a
0683 1200C7     500            lcall ?Set_Cursor_1 ; Select column and row
0686 D0E0       500            pop acc
0688 C083       501            push dph
068A C082       501            push dpl
068C C0E0       501            push acc
068E 90037D     501            mov dptr, #LCD_soakTemp
0691 1200BA     501            lcall ?Send_Constant_String
0694 D0E0       501            pop acc
0696 D082       501            pop dpl
0698 D083       501            pop dph
069A C000       502            push ar0
069C A847       502            mov r0, temp_soak+1
069E 1200CC     502            lcall ?Display_BCD
06A1 D000       502            pop ar0
06A3 C000       503            push ar0
06A5 A846       503            mov r0, temp_soak+0
06A7 1200CC     503            lcall ?Display_BCD
06AA D000       503            pop ar0
06AC C083       504            push dph
06AE C082       504            push dpl
06B0 C0E0       504            push acc
06B2 9003AF     504            mov dptr, #LCD_clearLine
06B5 1200BA     504            lcall ?Send_Constant_String
06B8 D0E0       504            pop acc
06BA D082       504            pop dpl
06BC D083       504            pop dph
06BE C0E0       505            push acc
06C0 7401       505            mov a, #1
06C2 14         505            dec a
06C3 1200C5     505            lcall ?Set_Cursor_2 ; Select column and row
06C6 D0E0       505            pop acc
06C8 C083       506            push dph
06CA C082       506            push dpl
06CC C0E0       506            push acc
06CE 900371     506            mov dptr, #LCD_soakTime
06D1 1200BA     506            lcall ?Send_Constant_String
06D4 D0E0       506            pop acc
06D6 D082       506            pop dpl
06D8 D083       506            pop dph
06DA C000       507            push ar0
06DC A848       507            mov r0, time_soak
06DE 1200CC     507            lcall ?Display_BCD
06E1 D000       507            pop ar0
06E3 C083       508            push dph
06E5 C082       508            push dpl
06E7 C0E0       508            push acc
06E9 9003AF     508            mov dptr, #LCD_clearLine
06EC 1200BA     508            lcall ?Send_Constant_String
06EF D0E0       508            pop acc
06F1 D082       508            pop dpl
06F3 D083       508            pop dph
06F5 02077B     509           ljmp menu_FSM_done
06F8            510   
06F8            511           menuFSM_configReflow:
06F8 B4017A     512           cjne a, #MENU_STATE_REFLOW, reset_menu_state
06FB            513           ; State - Config Reflow
06FB            514           ; Inc_Menu_Variable (INC_TEMP_PIN, temp_refl, noReflowTempInc)
06FB            515           ; noReflowTempInc:
06FB            516           ; Inc_Menu_Variable (INC_TIME_PIN, time_refl, noReflowTimeInc)
06FB            517           ; noReflowTimeInc:
06FB            518           ; display Reflow Menu Options
06FB C0E0       519            push acc
06FD 7401       519            mov a, #1
06FF 14         519            dec a
0700 1200C7     519            lcall ?Set_Cursor_1 ; Select column and row
0703 D0E0       519            pop acc
0705 C083       520            push dph
0707 C082       520            push dpl
0709 C0E0       520            push acc
070B 900395     520            mov dptr, #LCD_reflowTemp
070E 1200BA     520            lcall ?Send_Constant_String
0711 D0E0       520            pop acc
0713 D082       520            pop dpl
0715 D083       520            pop dph
0717 C000       521            push ar0
0719 A84A       521            mov r0, temp_refl+1
071B 1200CC     521            lcall ?Display_BCD
071E D000       521            pop ar0
0720 C000       522            push ar0
0722 A849       522            mov r0, temp_refl+0
0724 1200CC     522            lcall ?Display_BCD
0727 D000       522            pop ar0
0729 C083       523            push dph
072B C082       523            push dpl
072D C0E0       523            push acc
072F 9003AF     523            mov dptr, #LCD_clearLine
0732 1200BA     523            lcall ?Send_Constant_String
0735 D0E0       523            pop acc
0737 D082       523            pop dpl
0739 D083       523            pop dph
073B C0E0       524            push acc
073D 7401       524            mov a, #1
073F 14         524            dec a
0740 1200C5     524            lcall ?Set_Cursor_2 ; Select column and row
0743 D0E0       524            pop acc
0745 C083       525            push dph
0747 C082       525            push dpl
0749 C0E0       525            push acc
074B 900389     525            mov dptr, #LCD_reflowTime
074E 1200BA     525            lcall ?Send_Constant_String
0751 D0E0       525            pop acc
0753 D082       525            pop dpl
0755 D083       525            pop dph
0757 C000       526            push ar0
0759 A84B       526            mov r0, time_refl
075B 1200CC     526            lcall ?Display_BCD
075E D000       526            pop ar0
0760 C083       527            push dph
0762 C082       527            push dpl
0764 C0E0       527            push acc
0766 9003AF     527            mov dptr, #LCD_clearLine
0769 1200BA     527            lcall ?Send_Constant_String
076C D0E0       527            pop acc
076E D082       527            pop dpl
0770 D083       527            pop dph
0772 02077B     528           ljmp menu_FSM_done
0775            529   
0775            530           reset_menu_state: ; sets menu state variable to 0
0775 754500     531           mov MENU_STATE, #MENU_STATE_SOAK
0778 02077B     532           ljmp menu_FSM_done
077B            533   
077B            534           menu_FSM_done:
077B 22         535           ret
077C            536   
077C            537   main_program:
077C            538           ; George
077C 75817F     539           mov sp, #0x7f
077F 120432     540           lcall Initilize_All
0782 120087     541           lcall LCD_4BIT
0785            542   
0785            543           ; Default display - 
0785            544           ; Reflow oven controller 
0785            545           ; (Start or Configure?)
0785            546           PROGRAM_ENTRY:
0785 C0E0       547            push acc
0787 7401       547            mov a, #1
0789 14         547            dec a
078A 1200C7     547            lcall ?Set_Cursor_1 ; Select column and row
078D D0E0       547            pop acc
078F C083       548            push dph
0791 C082       548            push dpl
0793 C0E0       548            push acc
0795 900352     548            mov dptr, #LCD_defaultTop
0798 1200BA     548            lcall ?Send_Constant_String
079B D0E0       548            pop acc
079D D082       548            pop dpl
079F D083       548            pop dph
07A1 C0E0       549            push acc
07A3 7401       549            mov a, #1
07A5 14         549            dec a
07A6 1200C5     549            lcall ?Set_Cursor_2 ; Select column and row
07A9 D0E0       549            pop acc
07AB C083       550            push dph
07AD C082       550            push dpl
07AF C0E0       550            push acc
07B1 900360     550            mov dptr, #LCD_defaultBot
07B4 1200BA     550            lcall ?Send_Constant_String
07B7 D0E0       550            pop acc
07B9 D082       550            pop dpl
07BB D083       550            pop dph
07BD            551   
07BD            552           checkStartButton: ; assumed negative logic - used a label for an easy ljmp in the future
07BD 209512     553           jb START_PIN, noStartButtonPress
07C0 C002       554            push AR2
07C2 7A32       554            mov R2, #50
07C4 120038     554            lcall ?Wait_Milli_Seconds
07C7 D002       554            pop AR2
07C9 209506     555           jb START_PIN, noStartButtonPress
07CC 3095FD     556           jnb START_PIN, $
07CF 0207F3     557           ljmp enter_oven_fsm ; successful button press, enter oven FSM   
07D2            558   
07D2            559           noStartButtonPress:
07D2            560           ; if the 'IN_MENU' flag is set, always enter into the menu FSM, this is so that the menu FSM can always be entered
07D2            561           ; creates an infinite loop that will always display menu once entered - broken if START button pressed
07D2 300106     562           jnb IN_MENU_FLAG, checkMenuButtonPress
07D5 120606     563           lcall MENU_FSM 
07D8 0207BD     564           ljmp checkStartButton
07DB            565   
07DB            566           checkMenuButtonPress:
07DB            567           ; check for enter menu button press (reusing increment menu pin)
07DB 209612     568           jb CHANGE_MENU_PIN, noMenuButtonPress
07DE C002       569            push AR2
07E0 7A32       569            mov R2, #50
07E2 120038     569            lcall ?Wait_Milli_Seconds
07E5 D002       569            pop AR2
07E7 209606     570           jb CHANGE_MENU_PIN, noMenuButtonPress
07EA 3096FD     571           jnb CHANGE_MENU_PIN, $
07ED            572           ; setb IN_MENU_FLAG; successful button press, enter menu FSM loop ; - THIS LINE CAUSES THE BUG
07ED 020800     573           ljmp setMenuFlag ; this isn't executing...
07F0            574           
07F0            575           noMenuButtonPress:
07F0 0207BD     576           ljmp checkStartButton ; this line does not execute if ljmp setMenuFlag is there?!?!?
07F3            577   
07F3            578           enter_oven_fsm:
07F3 C201       579           clr IN_MENU_FLAG ; No longer in menu
07F5 D202       580           setb IN_OVEN_FLAG
07F7 1203EA     581           lcall Timer2_Init ; breaks things
07FA 1204AE     582           lcall OVEN_FSM ; will call STOP_PROCESS which loops back to the entry point
07FD 1204AB     583           lcall STOP_PROCESS ; added for safety
0800            584           
0800            585           setMenuFlag:
0800 D201       586           setb IN_MENU_FLAG
0802 0207BD     587           ljmp checkStartButton
0805            588   
0805            589           program_end:
0805 02077C     590           ljmp main_program
0808            591   EN
