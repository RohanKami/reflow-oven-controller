0000              1   
0000              2   
0000              3   
0000              4   
0000              5   ; Main file. FSM implementing the following sequence:
0000              6   ;       State 0: Power = 0% (default state)
0000              7   ;               if start = NO, self loop; if start = YES, next state
0000              8   ;       State 1: Power = 100%; Sec = 0
0000              9   ;               if temp <= 150, self loop; temp > 150, next
0000             10   ;       State 2: Power = 20%
0000             11   ;               if sec <= 60s, self loop; sec>60s, next
0000             12   ;       State 3: Power = 100%; Sec = 0
0000             13   ;               if temp <= 220, self loop; temp>220, next
0000             14   ;       State 4: Power = 20%
0000             15   ;               if sec <= 45s, self loop; sec >45, next
0000             16   ;       State 5: Power = 0%
0000             17   ;               if temp >=60, self loop; temp <60, next
0000             18   ;       return to state 0
0000             19   
                 21   $LIST
0000             23   
0000             24   ;  N76E003 pinout:
0000             25   ;                               -------
0000             26   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             27   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             28   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             29   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             30   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             31   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             32   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             33   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             34   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             35   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             36   ;                               -------
0000             37   
0000             38   
0000             39   
0000             40   ;-------------------------------------------------------------------------------------------------------------------------------------
0000             41   
0000             42   ;                                                              STYLE GUIDE
0000             43   
0000             44   ; End flag names with _FLAG
0000             45   ; Use all upper case for constants (anything defined in equ or pin definitions), as it makes it easier to read quickly
0000             46   ; Before any jump or logic block comment purpose and try to comment throughout - code should be self explanatory, comment "why" it was implemented this way
0000             47   ; Before any block of code also comment who wrote it 
0000             48   ; Aim for variable names with 8-20 characters
0000             49   
0000             50   ; --------------------------------------------------------------------------------------------------------------------------
0000             51   
0000             52   
0000             53   ; Timer constants
0000             54   CLK                   EQU 16600000 ; Microcontroller system frequency in Hz
0000             55   BAUD                  EQU 115200   ; Baud rate of UART in bps 
0000             56   TIMER1_RELOAD         EQU (0x100-(CLK/(16*BAUD))) ; ISR that's used for serial???
0000             57   TIMER2_RELOAD         EQU (65536-(CLK/1000))    ; For ISR that runs every 1ms
0000             58   TIMER0_RELOAD         EQU (0x10000-(CLK/4096))    ; For 2kHz square wave
0000             59   
0000             60   ; Pin definitions + Hardware Wiring
0000             61   START_PIN             EQU P1.5 ; change to correct pin later
0000             62   ; STOP_PIN              EQU P1.5 ; change to correct pin later
0000             63   ; INC_TIME_PIN          EQU P1.7 ; change to correct pin later
0000             64   ; INC_TEMP_PIN          EQU P1.7 ; change to correct pin later
0000             65   CHANGE_MENU_PIN       EQU P1.6 ; change to correct pin later
0000             66   ; SSR_OUTPUT_PIN        EQU P3.0 ; change to correct pin later
0000             67   
0000             68   
0000             69   MENU_STATE_SOAK        EQU 0
0000             70   MENU_STATE_REFLOW      EQU 1
0000             71   MENU_STATE_TEST        EQU 2
0000             72   OVEN_STATE_PREHEAT     EQU 0
0000             73   OVEN_STATE_SOAK        EQU 1
0000             74   OVEN_STATE_REFLOW      EQU 2
0000             75   
0000             76   ; define vectors
0000             77   ORG 0x0000 ; Reset vector
0000 020685      78           ljmp main_program
0003             79   ORG 0x0003 ; External interrupt 0 vector
0003 32          80           reti
000B             81   ORG 0x000B ; Timer/Counter 0 overflow interrupt vector
000B 020407      82            ljmp Timer0_ISR
0013             83   ORG 0x0013 ; External interrupt 1 vector
0013 32          84            reti
001B             85   ORG 0x001B ; Timer/Counter 1 overflow interrupt vector 
001B 32          86            reti
0023             87   ORG 0x0023 ; Serial port receive/transmit interrupt vector 
0023 32          88            reti
002B             89   ORG 0x002B ; Timer/Counter 2 overflow interrupt vector
002B 020408      90            ljmp Timer2_ISR
002E             91   
002E             92   
002E             93   ; register definitions previously needed by 'math32.inc' - currently commented out for future changes
0030             94   DSEG at 30H
0030             95   x               : ds 4
0034             96   y               : ds 4
0038             97   bcd             : ds 5
003D             98   bcdf            : ds 5
0042             99   VLED_ADC        : ds 2
0044            100   
0044            101   OVEN_STATE      : ds 1 ; stores oven FSM state
0045            102   MENU_STATE      : ds 1 ; stores menu FSM state
0046            103   temp_soak       : ds 1 
0047            104   time_soak       : ds 1
0048            105   temp_refl       : ds 1
0049            106   time_refl       : ds 1
004A            107   pwm             : ds 1 ; controls output power to SSR
004B            108   
0030            109   dseg at 0x30
0030            110   Count1ms        : ds 2 ; determines the number of 1ms increments that have passed 
0032            111   
002E            112   CSEG ;starts the absolute segment from that address
002E            113   ; These 'EQU' must match the hardware wiring
002E            114   LCD_RS          EQU P1.3
002E            115   ;LCD_RW         EQU PX.X ; Not used in this code, connect the pin to GND
002E            116   LCD_E           EQU P1.4
002E            117   LCD_D4          EQU P0.0
002E            118   LCD_D5          EQU P0.1
002E            119   LCD_D6          EQU P0.2
002E            120   LCD_D7          EQU P0.3
002E            121   
                123   	$LIST
00E2            125   
00E2            126   ; Flags that are used to control events 
0000            127   BSEG 
0000            128   mf              : dbit 1
0001            129   IN_MENU_FLAG    : dbit 1
0002            130   IN_OVEN_FLAG    : dbit 1
0003            131   
                547   $LIST
                133   $LIST
0352            135   
0352            136   ; Messages to display on LCD when in Menu FSM
0352 5265666C   137   LCD_defaultTop  : db 'Reflow Oven: ', 0
     6F77204F
     76656E3A
     2000
0360 53746172   138   LCD_defaultBot  : db 'Start/Configure?', 0
     742F436F
     6E666967
     7572653F
     00
0371 536F616B   139   LCD_soakTime    : db 'Soak Time: ', 0
     2054696D
     653A2000
037D 536F616B   140   LCD_soakTemp    : db 'Soak Temp: ', 0
     2054656D
     703A2000
0389 5265666C   141   LCD_reflowTime  : db 'Refl Time: ', 0
     2054696D
     653A2000
0395 5265666C   142   LCD_reflowTemp  : db 'Refl Temp: ', 0
     2054656D
     703A2000
03A1 54455354   143   LCD_TEST        : db 'TEST MESSAGE ', 0
     204D4553
     53414745
     2000
03AF 20202020   144   LCD_clearLine   : db '                ', 0 ; put at end to clear line
     20202020
     20202020
     20202020
     00
03C0            145   
03C0 50726568   146   preheatMessage  : db 'Preheat', 0
     65617400
03C8 536F616B   147   soakMessage     : db 'Soak', 0
     00
03CD 5265666C   148   reflowMessage   : db 'Reflow', 0
     6F7700
03D4            149   
03D4            150   ; Messages to display on LCD when in Oven Controller FSM
03D4            151   
03D4            152   ;---------------------------------;
03D4            153   ; Routine to initialize the ISR   ;
03D4            154   ; for timer 0                     ;
03D4            155   ;---------------------------------;
03D4            156   Timer0_Init:
03D4 438E08     157            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1 ; performs bit masking on CKON - Clock Control ; T0M = 1, timer 0 uses the system clock directly
03D7 E589       158            mov a, TMOD
03D9 54F0       159            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
03DB 4401       160            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer (M1M0 = 01 -> Mode 1: 16-bit Timer/Counter)
03DD F589       161            mov TMOD, a
03DF 758CF0     162            mov TH0, #high(TIMER0_RELOAD) ; 8051 works with 8 bits so the oepration T0 = TIMER0_RELOAD  (16 bits) is done by setting high byte then low byte (8x2)
03E2 758A2C     163            mov TL0, #low (TIMER0_RELOAD)
03E5            164            ; Enable the timer and interrupts
03E5 D2A9       165       setb ET0  ; Enable timer 0 interrupt
03E7 D28C       166       setb TR0  ; Start timer 0
03E9 22         167            ret
03EA            168   
03EA            169   ;---------------------------------;
03EA            170   ; Routine to initialize the ISR   ;
03EA            171   ; for timer 2                     ;
03EA            172   ;---------------------------------;
03EA            173   Timer2_Init:
03EA 75C800     174            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
03ED 75CDBF     175            mov TH2, #high(TIMER2_RELOAD)
03F0 75CC28     176            mov TL2, #low(TIMER2_RELOAD)
03F3            177            ; Set the reload value
03F3 43C980     178            orl T2MOD, #0x80 ; Enable timer 2 autoreload
03F6 75CBBF     179            mov RCMP2H, #high(TIMER2_RELOAD)
03F9 75CA28     180            mov RCMP2L, #low(TIMER2_RELOAD)
03FC            181            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
03FC E4         182            clr a
03FD F530       183            mov Count1ms+0, a
03FF F531       184            mov Count1ms+1, a
0401            185            ; Enable the timer and interrupts
0401 439B80     186            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
0404 D2CA       187           setb TR2  ; Enable timer 2
0406 22         188            ret
0407            189   
0407            190   Timer0_ISR:
0407 32         191   reti
0408            192   
0408            193   ;---------------------------------;
0408            194   ; ISR for timer 2                 ;
0408            195   ;---------------------------------;
0408            196   Timer2_ISR:
0408 C2CF       197           clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR.  It is bit addressable.
040A B284       198           cpl P0.4 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
040C            199   
040C            200           ; The two registers used in the ISR must be saved in the stack
040C C0E0       201           push acc
040E C0D0       202           push psw
0410            203   
0410            204           ; Increment the 16-bit one mili second counter
0410 0530       205           inc Count1ms+0    ; Increment the low 8-bits first
0412 E530       206           mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0414 7002       207           jnz Inc_done
0416 0531       208           inc Count1ms+1
0418            209           
0418            210           Inc_done:
0418            211           ; Check if one second has passed
0418 E530       212            mov     a, Count1ms+0
041A B4E810     213            cjne    a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
041D E531       214            mov     a, Count1ms+1
041F B4030B     215            cjne    a, #high(1000), Timer2_ISR_done         
0422            216   
0422            217           ; ; ---  1s has passed ----
0422 E544       218           mov a, OVEN_STATE
0424 2401       219           ADD A, #1
0426 F544       220           mov OVEN_STATE, a
0428            221   
0428            222           ; reset seconds ms counter
0428 E4         223           clr a
0429 F530       224           mov Count1ms+0, a
042B F531       225           mov Count1ms+1, a
042D            226           
042D            227           Timer2_ISR_done:
042D D0D0       228           pop psw
042F D0E0       229            pop acc
0431 32         230           reti
0432            231   
0432            232   Initilize_All:
0432            233           ; Configure pins to be bi-directional
0432 75AC00     234           mov      P3M1,#0x00
0435 75AD00     235            mov     P3M2,#0x00
0438 75B300     236            mov     P1M1,#0x00
043B 75B400     237            mov     P1M2,#0x00
043E 75B100     238            mov     P0M1,#0x00
0441 75B200     239            mov     P0M2,#0x00
0444            240   
0444 D296       241           setb    CHANGE_MENU_PIN
0446 D295       242           setb    START_PIN
0448            243   
0448 D2AF       244           setb    EA   ; Enable Global interrupts
044A            245   
044A            246   
044A            247           ; Since the reset button bounces, we need to wait a bit before
044A            248           ; sending messages, otherwise we risk displaying gibberish!
044A C002       249            push AR2
044C 7A32       249            mov R2, #50
044E 120038     249            lcall ?Wait_Milli_Seconds
0451 D002       249            pop AR2
0453            250   
0453            251           ; Now we can proceed with the configuration of the serial port
0453 438E10     252           orl      CKCON, #0x10 ; CLK is the input for timer 1
0456 438780     253           orl      PCON, #0x80  ; Bit SMOD=1, double baud rate
0459 759852     254           mov      SCON, #0x52
045C 53C4DF     255           anl      T3CON, #0b11011111
045F 53890F     256           anl      TMOD, #0x0F ; Clear the configuration bits for timer 1
0462 438920     257           orl      TMOD, #0x20 ; Timer 1 Mode 2
0465 758DF7     258           mov      TH1, #TIMER1_RELOAD
0468 D28E       259           setb    TR1
046A            260                           
046A            261           ; Using timer 0 for delay functions.  Initialize here:
046A C28C       262            clr     TR0         ; Stop timer 0
046C 438E08     263            orl     CKCON,#0x08 ; CLK is the input for timer 0
046F 5389F0     264            anl     TMOD,#0xF0  ; Clear the configuration bits for timer 0
0472 438901     265            orl     TMOD,#0x01  ; Timer 0 in Mode 1: 16-bit timer
0475            266            
0475            267            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
0475 43B382     268            orl     P1M1, #0b10000010
0478 53B47D     269            anl     P1M2, #0b01111101
047B            270            
047B            271            ; Initialize and start the ADC:
047B 53E8F0     272            anl     ADCCON0, #0xF0
047E 43E807     273            orl     ADCCON0, #0x07 ; Select channel 7
0481            274            
0481            275           ; AINDIDS select if some pins are analog inputs or digital I/O:
0481 75F600     276            mov     AINDIDS, #0x00 ; Disable all analog inputs
0484 43F681     277            orl     AINDIDS, #0b10000001 ; Activate AIN0 and AIN7 analog inputs
0487 43E101     278            orl     ADCCON1, #0x01 ; Enable ADC
048A            279   
048A            280           ; Menu Configuration
048A C201       281           clr     IN_MENU_FLAG
048C C202       282           clr     IN_OVEN_FLAG
048E 7405       283           mov     a, #5
0490 F545       284           mov     MENU_STATE, a ; set menu state to 0 
0492            285   
0492 754680     286           mov     temp_soak, #0x80
0495 754760     287           mov     time_soak, #0x60
0498 754890     288           mov     temp_refl, #0x90
049B 754901     289           mov     time_refl, #0x1
049E            290   
049E            291           ; Oven configuration
049E 754400     292           mov OVEN_STATE, #OVEN_STATE_PREHEAT
04A1            293           
04A1            294           ; note that above is pasted from lab 3 - AL, need to add setup code from lab 2
04A1 22         295           ret
04A2            296           
04A2            297   ;Button nested logic -> we should be constantly checking in the main loop for a stop (i.e the stop should be instantaneous)
04A2            298           ;->Buttons should allow for adjustment of soak temp, soak time, reflow temp, reflow time (Ui should be designed to make all these visible and clear)
04A2            299           ;->Start button should either be used only for start or used for start/pause (different from a stop
04A2            300           ;Try to use button logic given in lab 2 to stay consistent
04A2            301           ; Menu Logic (will keep UI clean)
04A2            302           ; Button to switch states - Changes a state variable (4 states -> 2 bits) (or two flags)
04A2            303           ; Two buttons to go up or down a value
04A2            304           ; One button to stop <---- safety feature make this button only STOP
04A2            305           
04A2            306           ; ;pseudo code lol
04A2            307           ; jb [button], [branch]
04A2            308           ; Wait_Milli_Seconds(#50)
04A2            309           ; jb [button], [branch]
04A2            310           ; jnb [button], $
04A2            311           ; ljmp [display??]
04A2            312   
04A2            313   ; Push button macro - It does not work :(
                314   Inc_Menu_Variable MAC
                315           jb %0, %2
                316           Wait_Milli_Seconds(#50) ; de-bounce
                317           jb %0, %2
                318           jnb %0, $
                319           ; successful press registered
                320           inc %1 ; increment param #1
                321   ENDMAC
04A2            322   
04A2            323   STOP_PROCESS:
04A2            324   ; Turn everything off
04A2 02068E     325           ljmp PROGRAM_ENTRY
04A5            326   
04A5            327   OVEN_FSM:
04A5            328           enterOvenStateCheck:
04A5 E544       329           mov a, OVEN_STATE
04A7            330   
04A7            331           ovenFSM_preheat:
04A7 B4004D     332           cjne a, #OVEN_STATE_PREHEAT, ovenFSM_soak
04AA C0E0       333            push acc
04AC 7401       333            mov a, #1
04AE 14         333            dec a
04AF 1200C7     333            lcall ?Set_Cursor_1 ; Select column and row
04B2 D0E0       333            pop acc
04B4 C083       334            push dph
04B6 C082       334            push dpl
04B8 C0E0       334            push acc
04BA 9003C0     334            mov dptr, #preheatMessage
04BD 1200BA     334            lcall ?Send_Constant_String
04C0 D0E0       334            pop acc
04C2 D082       334            pop dpl
04C4 D083       334            pop dph
04C6 C083       335            push dph
04C8 C082       335            push dpl
04CA C0E0       335            push acc
04CC 9003AF     335            mov dptr, #LCD_clearLine
04CF 1200BA     335            lcall ?Send_Constant_String
04D2 D0E0       335            pop acc
04D4 D082       335            pop dpl
04D6 D083       335            pop dph
04D8 C0E0       336            push acc
04DA 7401       336            mov a, #1
04DC 14         336            dec a
04DD 1200C5     336            lcall ?Set_Cursor_2 ; Select column and row
04E0 D0E0       336            pop acc
04E2 C083       337            push dph
04E4 C082       337            push dpl
04E6 C0E0       337            push acc
04E8 9003AF     337            mov dptr, #LCD_clearLine
04EB 1200BA     337            lcall ?Send_Constant_String
04EE D0E0       337            pop acc
04F0 D082       337            pop dpl
04F2 D083       337            pop dph
04F4 02059D     338           ljmp oven_FSM_done
04F7            339   
04F7            340           ovenFSM_soak:
04F7 B4014D     341           cjne a, #OVEN_STATE_SOAK, ovenFSM_reflow
04FA C0E0       342            push acc
04FC 7401       342            mov a, #1
04FE 14         342            dec a
04FF 1200C7     342            lcall ?Set_Cursor_1 ; Select column and row
0502 D0E0       342            pop acc
0504 C083       343            push dph
0506 C082       343            push dpl
0508 C0E0       343            push acc
050A 9003C8     343            mov dptr, #soakMessage
050D 1200BA     343            lcall ?Send_Constant_String
0510 D0E0       343            pop acc
0512 D082       343            pop dpl
0514 D083       343            pop dph
0516 C083       344            push dph
0518 C082       344            push dpl
051A C0E0       344            push acc
051C 9003AF     344            mov dptr, #LCD_clearLine
051F 1200BA     344            lcall ?Send_Constant_String
0522 D0E0       344            pop acc
0524 D082       344            pop dpl
0526 D083       344            pop dph
0528 C0E0       345            push acc
052A 7401       345            mov a, #1
052C 14         345            dec a
052D 1200C5     345            lcall ?Set_Cursor_2 ; Select column and row
0530 D0E0       345            pop acc
0532 C083       346            push dph
0534 C082       346            push dpl
0536 C0E0       346            push acc
0538 9003AF     346            mov dptr, #LCD_clearLine
053B 1200BA     346            lcall ?Send_Constant_String
053E D0E0       346            pop acc
0540 D082       346            pop dpl
0542 D083       346            pop dph
0544 02059D     347           ljmp oven_FSM_done
0547            348   
0547            349           ovenFSM_reflow:
0547 B4024D     350           cjne a, #OVEN_STATE_REFLOW, ovenFSM_exit
054A C0E0       351            push acc
054C 7401       351            mov a, #1
054E 14         351            dec a
054F 1200C7     351            lcall ?Set_Cursor_1 ; Select column and row
0552 D0E0       351            pop acc
0554 C083       352            push dph
0556 C082       352            push dpl
0558 C0E0       352            push acc
055A 9003CD     352            mov dptr, #reflowMessage
055D 1200BA     352            lcall ?Send_Constant_String
0560 D0E0       352            pop acc
0562 D082       352            pop dpl
0564 D083       352            pop dph
0566 C083       353            push dph
0568 C082       353            push dpl
056A C0E0       353            push acc
056C 9003AF     353            mov dptr, #LCD_clearLine
056F 1200BA     353            lcall ?Send_Constant_String
0572 D0E0       353            pop acc
0574 D082       353            pop dpl
0576 D083       353            pop dph
0578 C0E0       354            push acc
057A 7401       354            mov a, #1
057C 14         354            dec a
057D 1200C5     354            lcall ?Set_Cursor_2 ; Select column and row
0580 D0E0       354            pop acc
0582 C083       355            push dph
0584 C082       355            push dpl
0586 C0E0       355            push acc
0588 9003AF     355            mov dptr, #LCD_clearLine
058B 1200BA     355            lcall ?Send_Constant_String
058E D0E0       355            pop acc
0590 D082       355            pop dpl
0592 D083       355            pop dph
0594 02059D     356           ljmp oven_FSM_done
0597            357   
0597            358           ovenFSM_exit:
0597 754400     359           mov OVEN_STATE, #OVEN_STATE_PREHEAT
059A 02059D     360           ljmp oven_FSM_done
059D            361           
059D            362           oven_FSM_done:
059D 0204A5     363           ljmp OVEN_FSM
05A0 22         364           ret
05A1            365   
05A1            366   MENU_FSM:        
05A1 209614     367            jb CHANGE_MENU_PIN, enterMenuStateCheck
05A4 C002       368            push AR2
05A6 7A32       368            mov R2, #50
05A8 120038     368            lcall ?Wait_Milli_Seconds
05AB D002       368            pop AR2               ; debounce delay
05AD 209608     369            jb CHANGE_MENU_PIN, enterMenuStateCheck  ; 
05B0 3096FD     370            jnb CHANGE_MENU_PIN, $        ; wait for release
05B3            371   
05B3 E545       372           mov a, MENU_STATE
05B5 04         373           inc a
05B6 F545       374           mov MENU_STATE, a ; line is doubled for clarity - George
05B8            375           
05B8            376           enterMenuStateCheck:
05B8 E545       377           mov a, MENU_STATE
05BA            378   
05BA            379           menuFSM_configSoak:
05BA B4005F     380           cjne a, #MENU_STATE_SOAK, menuFSM_configReflow
05BD            381           ; State - Config Soak
05BD            382           ; Inc_Menu_Variable (INC_TEMP_PIN, temp_soak, noSoakTempInc)
05BD            383           ; noSoakTempInc:
05BD            384           ; Inc_Menu_Variable (INC_TIME_PIN, time_soak, noSoaktimeInc)
05BD            385           ; noSoaktimeInc:
05BD            386           ; display Soak Menu Options
05BD C0E0       387            push acc
05BF 7401       387            mov a, #1
05C1 14         387            dec a
05C2 1200C7     387            lcall ?Set_Cursor_1 ; Select column and row
05C5 D0E0       387            pop acc
05C7 C083       388            push dph
05C9 C082       388            push dpl
05CB C0E0       388            push acc
05CD 90037D     388            mov dptr, #LCD_soakTemp
05D0 1200BA     388            lcall ?Send_Constant_String
05D3 D0E0       388            pop acc
05D5 D082       388            pop dpl
05D7 D083       388            pop dph
05D9 C000       389            push ar0
05DB A846       389            mov r0, temp_soak
05DD 1200CC     389            lcall ?Display_BCD
05E0 D000       389            pop ar0
05E2 C0E0       390            push acc
05E4 7401       390            mov a, #1
05E6 14         390            dec a
05E7 1200C5     390            lcall ?Set_Cursor_2 ; Select column and row
05EA D0E0       390            pop acc
05EC C083       391            push dph
05EE C082       391            push dpl
05F0 C0E0       391            push acc
05F2 900371     391            mov dptr, #LCD_soakTime
05F5 1200BA     391            lcall ?Send_Constant_String
05F8 D0E0       391            pop acc
05FA D082       391            pop dpl
05FC D083       391            pop dph
05FE C000       392            push ar0
0600 A847       392            mov r0, time_soak
0602 1200CC     392            lcall ?Display_BCD
0605 D000       392            pop ar0
0607 C083       393            push dph
0609 C082       393            push dpl
060B C0E0       393            push acc
060D 9003AF     393            mov dptr, #LCD_clearLine
0610 1200BA     393            lcall ?Send_Constant_String
0613 D0E0       393            pop acc
0615 D082       393            pop dpl
0617 D083       393            pop dph
0619 020684     394           ljmp menu_FSM_done
061C            395   
061C            396           menuFSM_configReflow:
061C B4015F     397           cjne a, #MENU_STATE_REFLOW, reset_menu_state
061F            398           ; State - Config Reflow
061F            399           ; Inc_Menu_Variable (INC_TEMP_PIN, temp_refl, noReflowTempInc)
061F            400           ; noReflowTempInc:
061F            401           ; Inc_Menu_Variable (INC_TIME_PIN, time_refl, noReflowTimeInc)
061F            402           ; noReflowTimeInc:
061F            403           ; display Reflow Menu Options
061F C0E0       404            push acc
0621 7401       404            mov a, #1
0623 14         404            dec a
0624 1200C7     404            lcall ?Set_Cursor_1 ; Select column and row
0627 D0E0       404            pop acc
0629 C083       405            push dph
062B C082       405            push dpl
062D C0E0       405            push acc
062F 900395     405            mov dptr, #LCD_reflowTemp
0632 1200BA     405            lcall ?Send_Constant_String
0635 D0E0       405            pop acc
0637 D082       405            pop dpl
0639 D083       405            pop dph
063B C000       406            push ar0
063D A848       406            mov r0, temp_refl
063F 1200CC     406            lcall ?Display_BCD
0642 D000       406            pop ar0
0644 C0E0       407            push acc
0646 7401       407            mov a, #1
0648 14         407            dec a
0649 1200C5     407            lcall ?Set_Cursor_2 ; Select column and row
064C D0E0       407            pop acc
064E C083       408            push dph
0650 C082       408            push dpl
0652 C0E0       408            push acc
0654 900389     408            mov dptr, #LCD_reflowTime
0657 1200BA     408            lcall ?Send_Constant_String
065A D0E0       408            pop acc
065C D082       408            pop dpl
065E D083       408            pop dph
0660 C000       409            push ar0
0662 A849       409            mov r0, time_refl
0664 1200CC     409            lcall ?Display_BCD
0667 D000       409            pop ar0
0669 C083       410            push dph
066B C082       410            push dpl
066D C0E0       410            push acc
066F 9003AF     410            mov dptr, #LCD_clearLine
0672 1200BA     410            lcall ?Send_Constant_String
0675 D0E0       410            pop acc
0677 D082       410            pop dpl
0679 D083       410            pop dph
067B 020684     411           ljmp menu_FSM_done
067E            412   
067E            413           reset_menu_state: ; sets menu state variable to 0
067E 754500     414           mov MENU_STATE, #MENU_STATE_SOAK
0681 020684     415           ljmp menu_FSM_done
0684            416   
0684            417           menu_FSM_done:
0684 22         418           ret
0685            419   
0685            420   main_program:
0685            421           ; George
0685 75817F     422           mov sp, #0x7f
0688 120432     423           lcall Initilize_All
068B 120087     424           lcall LCD_4BIT
068E            425   
068E            426           ; Default display - 
068E            427           ; Reflow oven controller 
068E            428           ; (Start or Configure?)
068E            429           PROGRAM_ENTRY:
068E C0E0       430            push acc
0690 7401       430            mov a, #1
0692 14         430            dec a
0693 1200C7     430            lcall ?Set_Cursor_1 ; Select column and row
0696 D0E0       430            pop acc
0698 C083       431            push dph
069A C082       431            push dpl
069C C0E0       431            push acc
069E 900352     431            mov dptr, #LCD_defaultTop
06A1 1200BA     431            lcall ?Send_Constant_String
06A4 D0E0       431            pop acc
06A6 D082       431            pop dpl
06A8 D083       431            pop dph
06AA C0E0       432            push acc
06AC 7401       432            mov a, #1
06AE 14         432            dec a
06AF 1200C5     432            lcall ?Set_Cursor_2 ; Select column and row
06B2 D0E0       432            pop acc
06B4 C083       433            push dph
06B6 C082       433            push dpl
06B8 C0E0       433            push acc
06BA 900360     433            mov dptr, #LCD_defaultBot
06BD 1200BA     433            lcall ?Send_Constant_String
06C0 D0E0       433            pop acc
06C2 D082       433            pop dpl
06C4 D083       433            pop dph
06C6            434   
06C6            435           checkStartButton: ; assumed negative logic - used a label for an easy ljmp in the future
06C6 209512     436           jb START_PIN, noStartButtonPress
06C9 C002       437            push AR2
06CB 7A32       437            mov R2, #50
06CD 120038     437            lcall ?Wait_Milli_Seconds
06D0 D002       437            pop AR2
06D2 209506     438           jb START_PIN, noStartButtonPress
06D5 3095FD     439           jnb START_PIN, $
06D8 0206FC     440           ljmp enter_oven_fsm ; successful button press, enter oven FSM   
06DB            441   
06DB            442           noStartButtonPress:
06DB            443           ; if the 'IN_MENU' flag is set, always enter into the menu FSM, this is so that the menu FSM can always be entered
06DB            444           ; creates an infinite loop that will always display menu once entered - broken if START button pressed
06DB 300106     445           jnb IN_MENU_FLAG, checkMenuButtonPress
06DE 1205A1     446           lcall MENU_FSM 
06E1 0206C6     447           ljmp checkStartButton
06E4            448   
06E4            449           checkMenuButtonPress:
06E4            450           ; check for enter menu button press (reusing increment menu pin)
06E4 209612     451           jb CHANGE_MENU_PIN, noMenuButtonPress
06E7 C002       452            push AR2
06E9 7A32       452            mov R2, #50
06EB 120038     452            lcall ?Wait_Milli_Seconds
06EE D002       452            pop AR2
06F0 209606     453           jb CHANGE_MENU_PIN, noMenuButtonPress
06F3 3096FD     454           jnb CHANGE_MENU_PIN, $
06F6            455           ; setb IN_MENU_FLAG; successful button press, enter menu FSM loop ; - THIS LINE CAUSES THE BUG
06F6 020709     456           ljmp setMenuFlag ; this isn't executing...
06F9            457           
06F9            458           noMenuButtonPress:
06F9 0206C6     459           ljmp checkStartButton ; this line does not execute if ljmp setMenuFlag is there?!?!?
06FC            460   
06FC            461           enter_oven_fsm:
06FC C201       462           clr IN_MENU_FLAG ; No longer in menu
06FE D202       463           setb IN_OVEN_FLAG
0700 1203EA     464           lcall Timer2_Init ; breaks things
0703 1204A5     465           lcall OVEN_FSM ; will call STOP_PROCESS which loops back to the entry point
0706 1204A2     466           lcall STOP_PROCESS ; added for safety
0709            467           
0709            468           setMenuFlag:
0709 D201       469           setb IN_MENU_FLAG
070B 0206C6     470           ljmp checkStartButton
070E            471   
070E            472           program_end:
070E 020685     473           ljmp main_program
0711            474   EN
